import os
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, accuracy_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns
import json

class RandomForestSensorClassifier:
    def __init__(self, n_estimators=100, max_depth=10, random_state=42):
        """
        Initialize Random Forest Classifier for IoT sensor data
        
        Args:
            n_estimators (int): Number of trees in forest
            max_depth (int): Maximum depth of trees
            random_state (int): Seed for reproducibility
        """
        self.model = RandomForestClassifier(
            n_estimators=n_estimators,
            max_depth=max_depth,
            bootstrap=True,
            oob_score=True,
            random_state=random_state,
            max_features='sqrt'  # Default feature selection strategy
        )
        
        self.feature_importances_ = None
        self.classification_report_ = None
    
    def preprocess_data(self, filepath):
        """
        Preprocess IoT sensor data
        
        Args:
            filepath (str): Path to CSV file
        
        Returns:
            tuple: X_train, X_test, y_train, y_test
        """
        # Load data
        data = pd.read_csv(filepath)
        
        # Handle categorical features
        categorical_columns = data.select_dtypes(include=['object']).columns
        label_encoders = {}
        
        for col in categorical_columns:
            le = LabelEncoder()
            data[col] = le.fit_transform(data[col].astype(str))
            label_encoders[col] = le
        
        # Separate features and class1
        X = data.drop('class1', axis=1)
        y = data['class1']
        
        # Split data
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )
        
        return X_train, X_test, y_train, y_test
    
    def train(self, X_train, y_train):
        """
        Train Random Forest model
        
        Args:
            X_train (array): Training features
            y_train (array): Training labels
        """
        self.model.fit(X_train, y_train)
        
        # Store feature importances
        self.feature_importances_ = pd.DataFrame({
            'feature': X_train.columns,
            'importance': self.model.feature_importances_
        }).sort_values('importance', ascending=False)
    
    def evaluate(self, X_test, y_test):
        """
        Evaluate model performance
        
        Args:
            X_test (array): Test features
            y_test (array): Test labels
        
        Returns:
            dict: Performance metrics
        """
        y_pred = self.model.predict(X_test)
        
        # Generate classification report
        self.classification_report_ = classification_report(y_test, y_pred, output_dict=True)
        
        metrics = {
            'accuracy': accuracy_score(y_test, y_pred),
            'f1_score': f1_score(y_test, y_pred, average='weighted'),
            'oob_score': self.model.oob_score_
        }
        
        return metrics
    
    def plot_feature_importance(self, top_n=10, output_path=None):
        """
        Plot top N feature importances
        
        Args:
            top_n (int): Number of top features to plot
            output_path (str): Path to save the plot
        """
        if self.feature_importances_ is None:
            raise ValueError("Model not trained yet")
        
        plt.figure(figsize=(10, 6))
        top_features = self.feature_importances_.head(top_n)
        
        sns.barplot(
            x='importance', 
            y='feature', 
            data=top_features, 
            palette='viridis'
        )
        
        plt.title(f'Top {top_n} Feature Importances')
        plt.xlabel('Importance')
        plt.ylabel('Features')
        plt.tight_layout()
        
        if output_path:
            plt.savefig(output_path)
            plt.close()
        else:
            plt.show()
    
    def save_model(self, filepath):
        """
        Save trained model
        
        Args:
            filepath (str): Path to save model
        """
        import joblib
        joblib.dump(self.model, filepath)
    
    def load_model(self, filepath):
        """
        Load pre-trained model
        
        Args:
            filepath (str): Path to model file
        """
        import joblib
        self.model = joblib.load(filepath)

def main(filepath):
    """
    Main function to run Random Forest pipeline
    
    Args:
        filepath (str): Path to IoT sensor data CSV
    """
    # Create outputs folder if it doesn't exist
    os.makedirs('outputs', exist_ok=True)
    
    # Initialize classifier
    rf_classifier = RandomForestSensorClassifier()
    
    # Preprocess data
    X_train, X_test, y_train, y_test = rf_classifier.preprocess_data(filepath)
    
    # Train model
    rf_classifier.train(X_train, y_train)
    
    # Evaluate model
    metrics = rf_classifier.evaluate(X_test, y_test)
    
    # Save metrics to JSON
    with open('outputs/model_metrics.json', 'w') as f:
        json.dump(metrics, f, indent=4)
    
    # Save classification report
    with open('outputs/classification_report.json', 'w') as f:
        json.dump(rf_classifier.classification_report_, f, indent=4)
    
    # Print results
    print("Model Performance:")
    for metric, value in metrics.items():
        print(f"{metric.replace('_', ' ').title()}: {value}")
    
    # Plot and save feature importances
    rf_classifier.plot_feature_importance(
        top_n=10, 
        output_path='outputs/feature_importances.png'
    )
    
    # Save model
    rf_classifier.save_model('outputs/random_forest_model.joblib')
    
    # Save feature importances to CSV
    rf_classifier.feature_importances_.to_csv('outputs/feature_importances.csv', index=False)
    
    return rf_classifier

# Example usage (uncomment and provide actual filepath)
if __name__ == "__main__":
    model = main(r'C:\Users\derick\Desktop\netty\cow_mastitis_data.csv')